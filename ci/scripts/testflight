#!/bin/bash
#
# ci/scripts/testflight
#
# Script for testing a BOSH release using `bosh2`
#
# author:  James Hunt <james@niftylogic.com>, Dr Nic Williams <drnicwilliams@gmail.com>

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

#!/bin/bash

set -e

: ${BOSH_ENVIRONMENT:?required}
: ${BOSH_CA_CERT:?required}
: ${BOSH_CLIENT:?required}
: ${BOSH_CLIENT_SECRET:?required}
: ${BOSH_DEPLOYMENT:?required}
: ${MANIFEST_PATH:?required}

cd ${REPO_ROOT:?required}
header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Cleaning up from any previous deployments..."
bosh2 -n delete-deployment

header "Creating candidate BOSH release..."
bosh2 create-release
bosh2 upload-release --rebase

header "Deploying to ${BOSH_ENVIRONMENT}..."
release_name=$(bosh2 int config/final.yml --path /final_name)

header "Choosing cloud-config options"
vm_type=$(bosh2 int <(bosh2 cloud-config) --path /vm_types/0/name)
disk_type=$(bosh2 int <(bosh2 cloud-config) --path /disk_types/0/name)
network=$(bosh2 int <(bosh2 cloud-config) --path /networks/0/name)
ig_name=${ig_name:-$release_name}

mkdir -p tmp

cat > tmp/deployment.yml <<YAML
---
- type: replace
  path: /name
  value: ${BOSH_DEPLOYMENT}

- type: replace
  path: /releases/name=${release_name}
  value:
    name: ${release_name}
    version: latest

- type: replace
  path: /instance_groups/name=${ig_name}/vm_type
  value: ${vm_type}

- type: replace
  path: /instance_groups/name=${ig_name}/persistent_disk_type
  value: ${disk_type}

- type: replace
  path: /instance_groups/name=${ig_name}/networks
  value: [{name: ${vm_type}}]
YAML

cat > tmp/vars.yml <<YAML
--- {}
YAML

op_patch_files_flags=""
for op_patch_file in ${op_patch_files//,/ } ; do
   op_patch_files_flags="${op_patch_files_flags} -o $op_patch_file"
done

set -x
bosh2 int ${MANIFEST_PATH} \
  -o tmp/deployment.yml    \
  ${op_patch_files_flags}            \
  --vars-store tmp/creds.yml \
  --vars-file  tmp/vars.yml  \
  --var-errs \
    > tmp/manifest.yml

bosh2 -n deploy tmp/manifest.yml

if [[ ! -z $TEST_ERRAND ]]; then
	bosh2 run-errand "$TEST_ERRAND"
else
	echo "No test errand specified, skipping."
fi

echo
echo "SUCCESS"
exit 0
